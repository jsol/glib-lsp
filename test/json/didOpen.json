{"method":"textDocument\/didOpen","params":{"textDocument":{"uri":"file:\/\/\/home\/jens\/git\/glib-reader\/message.c","languageId":"c","version":0,"text":"#include <glib.h>\n#include <json-glib\/json-glib.h>\n\n#include \"message.h\"\n\n#define INITIALIZE  \"initialize\"\n#define INITIALIZED \"initialized\"\n#define DIDOPEN     \"textDocument\/didOpen\"\n#define DIDCHANGE   \"textDocument\/didChange\"\n#define DIDSAVE     \"textDocument\/didSave\"\n#define DIAGNOSTIC  \"textDocument\/diagnostic\"\n\nstatic gchar *\nget_string_from_json_object(JsonObject *object)\n{\n  JsonNode *root;\n  JsonGenerator *generator;\n  gchar *text;\n\n  \/* Make it the root node *\/\n  root = json_node_init_object(json_node_alloc(), object);\n  generator = json_generator_new();\n  json_generator_set_root(generator, root);\n  text = json_generator_to_data(generator, NULL);\n\n  \/* Release everything *\/\n  g_object_unref(generator);\n  json_node_free(root);\n\n  return text;\n}\n\nstatic gboolean\nparse_range(JsonObject *params, struct range *r)\n{\n  JsonObject *range;\n  JsonObject *start;\n  JsonObject *end;\n\n  range = json_object_get_object_member(params, \"range\");\n  start = json_object_get_object_member(range, \"start\");\n  end = json_object_get_object_member(range, \"end\");\n\n  r->start.character = json_object_get_int_member(start, \"character\");\n  r->start.line = json_object_get_int_member(start, \"line\");\n  r->end.character = json_object_get_int_member(end, \"character\");\n  r->end.line = json_object_get_int_member(end, \"line\");\n\n  return TRUE;\n}\n\nstatic gboolean\nparse_document(JsonObject *params, struct document_change *d)\n{\n  JsonObject *text_document;\n\n  text_document = json_object_get_object_member(params, \"textDocument\");\n  d->uri = g_strdup(json_object_get_string_member(text_document, \"uri\"));\n\n  return TRUE;\n}\n\nstatic message_t *\nparse_request(JsonObject *root, GError **err)\n{\n  const gchar *method;\n  message_t *msg = NULL;\n\n  g_assert(root);\n  g_assert(err == NULL || *err == NULL);\n\n  method = json_object_get_string_member(root, \"method\");\n\n  if (g_strcmp0(method, INITIALIZE) == 0) {\n    JsonObject *client;\n    JsonObject *params;\n    params = json_object_get_object_member(root, \"params\");\n    client = json_object_get_object_member(params, \"clientInfo\");\n\n    g_assert(client);\n\n    msg = g_malloc0(sizeof(*msg));\n    msg->type = MESSAGE_TYPE_INITIALIZE;\n    msg->data.init.id = json_object_get_int_member(root, \"id\");\n    msg->data.init.client_name = g_strdup(\n      json_object_get_string_member(client, \"name\"));\n    msg->data.init.client_version = g_strdup(\n      json_object_get_string_member(client, \"version\"));\n    return msg;\n  }\n  if (g_strcmp0(method, DIAGNOSTIC) == 0) {\n    JsonObject *params;\n\n    params = json_object_get_object_member(root, \"params\");\n    msg = g_malloc0(sizeof(*msg));\n    msg->type = MESSAGE_TYPE_DIAGNOSTIC;\n    msg->data.diagnostic.id = json_object_get_int_member(root, \"id\");\n    parse_document(params, &msg->data.diagnostic.document);\n    parse_range(params, &msg->data.diagnostic.range);\n    return msg;\n  }\n\n  g_set_error(err, MESSAGE_ERROR, -1, \"Invalid request method: %s\", method);\n\n  return NULL;\n}\n\nstatic message_t *\nparse_notification(JsonObject *root, GError **err)\n{\n  const gchar *method;\n  message_t *msg = NULL;\n\n  g_assert(root);\n  g_assert(err == NULL || *err == NULL);\n\n  method = json_object_get_string_member(root, \"method\");\n  if (g_strcmp0(method, INITIALIZED) == 0) {\n    msg = g_malloc0(sizeof(*msg));\n    msg->type = MESSAGE_TYPE_INITIALIZED;\n    return msg;\n  }\n\n  if (g_strcmp0(method, DIDCHANGE) == 0) {\n    msg = g_malloc0(sizeof(*msg));\n    msg->type = MESSAGE_TYPE_CHANGE;\n    return msg;\n  }\n  if (g_strcmp0(method, DIDOPEN) == 0) {\n    msg = g_malloc0(sizeof(*msg));\n    msg->type = MESSAGE_TYPE_OPEN;\n    return msg;\n  }\n\n  g_set_error(err, MESSAGE_ERROR, -1, \"Invalid notification method: %s\", method);\n\n  return NULL;\n}\n\nmessage_t *\nmessage_parse(const gchar *json, gsize len, GError **err)\n{\n  message_t *msg = NULL;\n  JsonParser *parser = NULL;\n  JsonNode *root;\n  JsonObject *obj;\n\n  parser = json_parser_new();\n\n  if (!json_parser_load_from_data(parser, json, len, err)) {\n    goto out;\n  }\n\n  root = json_parser_get_root(parser);\n  if (root == NULL) {\n    g_set_error(err, MESSAGE_ERROR, -1,\n                \"Failed to get root node from string: %s\", json);\n    goto out;\n  }\n\n  if (!JSON_NODE_HOLDS_OBJECT(root)) {\n    g_set_error(err, MESSAGE_ERROR, -1,\n                \"Root node is not an object in string: %s\", json);\n    goto out;\n  }\n\n  obj = json_node_get_object(root);\n\n  \/* Here the actual message content is parsed, if it is of interest: *\/\n  if (json_object_has_member(obj, \"jsonrpc\") &&\n      json_object_has_member(obj, \"method\")) {\n    if (json_object_has_member(obj, \"id\")) {\n      msg = parse_request(obj, err);\n    } else {\n      msg = parse_notification(obj, err);\n    }\n  }\n\n  if (msg == NULL && (err != NULL && *err == NULL)) {\n    g_set_error(err, MESSAGE_ERROR, -1, \"Did not recognize: %s\", json);\n    goto out;\n  }\n  \/* Fall through *\/\nout:\n  return msg;\n}\n\nstatic JsonObject *\nget_response_root(gint64 id)\n{\n  JsonObject *root;\n\n  root = json_object_new();\n\n  json_object_set_string_member(root, \"jsonrpc\", \"2.0\");\n  json_object_set_int_member(root, \"id\", id);\n\n  return root;\n}\n\ngchar *\nmessage_init_response(gint64 id,\n                      struct init_config *c,\n                      const gchar *server_name,\n                      const gchar *version)\n{\n  g_return_val_if_fail(c != NULL, NULL);\n\n  JsonObject *root;\n  JsonObject *result;\n  JsonObject *server_info;\n  JsonObject *capabilities;\n\n  root = get_response_root(id);\n  result = json_object_new();\n  server_info = json_object_new();\n  capabilities = json_object_new();\n\n  json_object_set_string_member(server_info, \"name\", server_name);\n  json_object_set_string_member(server_info, \"version\", version);\n\n  json_object_set_int_member(capabilities, \"textDocumentSync\", c->sync);\n  json_object_set_string_member(capabilities, \"workspaceFolders\", \"utf-16\");\n\n  JsonObject *code_action;\n  code_action = json_object_new();\n  JsonArray *kinds;\n\n  kinds = json_array_new();\n\n  json_array_add_string_element(kinds, \"quickfix\");\n  json_object_set_boolean_member(code_action, \"workDoneProgress\", FALSE);\n  json_object_set_array_member(code_action, \"codeActionKinds\", kinds);\n  json_object_set_object_member(capabilities, \"codeActionProvider\", code_action);\n\n  JsonObject *diagnostic;\n  diagnostic = json_object_new();\n  json_object_set_boolean_member(diagnostic, \"interFileDependencies\", FALSE);\n  json_object_set_object_member(capabilities, \"diagnosticProvider\", diagnostic);\n\n  JsonObject *workspace;\n  workspace = json_object_new();\n  JsonObject *wsf;\n  wsf = json_object_new();\n\n  json_object_set_boolean_member(wsf, \"changeNotifications\", TRUE);\n  json_object_set_boolean_member(wsf, \"supported\", TRUE);\n  json_object_set_object_member(workspace, \"workspaceFolders\", wsf);\n  json_object_set_object_member(capabilities, \"workspace\", workspace);\n\n  json_object_set_object_member(result, \"serverInfo\", server_info);\n  json_object_set_object_member(result, \"capabilities\", capabilities);\n\n  json_object_set_object_member(root, \"result\", result);\n\n  return get_string_from_json_object(root);\n}\n\nstatic void\nfree_doc_change(gpointer data)\n{\n  struct document_change *c = (struct document_change *) data;\n  g_free(c->language);\n  g_free(c->uri);\n  g_free(c->text);\n}\n\nvoid\nmessage_free(message_t *msg)\n{\n  if (msg == NULL) {\n    return;\n  }\n  switch (msg->type) {\n  case MESSAGE_TYPE_INITIALIZED:\n    break;\n  case MESSAGE_TYPE_INITIALIZE:\n    g_free(msg->data.init.client_name);\n    g_free(msg->data.init.client_version);\n    break;\n  case MESSAGE_TYPE_OPEN:\n    g_free(msg->data.open.language);\n    g_free(msg->data.open.uri);\n    g_free(msg->data.open.text);\n    break;\n  case MESSAGE_TYPE_CHANGE:\n    g_list_free_full(msg->data.change.changes, free_doc_change);\n    break;\n  }\n}\n\nG_DEFINE_QUARK(\"message-error-quark\", message_error)\n"}},"jsonrpc":"2.0"}
